variables:
    CARGO_HOME: $CI_PROJECT_DIR/cargo
    FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
    GIT_SUBMODULE_STRATEGY: normal
    RUST_VERSION: "1.82"
    # Faster zipping helping with cache sync speeds (https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1797)
    FF_USE_FASTZIP: "true"
    CACHE_COMPRESSION_LEVEL: fast
    RUSTFLAGS: "-D warnings"

# Only run pipelines for merge requests, tags, and the default branch.
# https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html#use-rules-to-add-jobs
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
    - test
    - trawler

cache:
    key:
        files:
            - Cargo.lock
    paths:
        - target
        - $CARGO_HOME

check:clippy:
    stage: test
    variables:
      # Override the -D warnings for clippy
      RUSTFLAGS: ""
    image: "rust:$RUST_VERSION"
    before_script:
        - rustup component add clippy
        - cargo install --locked gitlab_clippy
        - cargo clippy -V
    script:
        - cargo clippy --workspace --exclude spade-cxx -- --allow clippy::useless_format
    after_script:
        - cargo clippy --workspace --exclude spade-cxx --message-format=json -- --allow clippy::useless_format | $CARGO_HOME/bin/gitlab-clippy > gl-code-quality-report.json
    artifacts:
        reports:
            codequality: gl-code-quality-report.json
        expire_in: 1 week

test:linux:
    stage: test
    image: "rust:$RUST_VERSION"
    before_script:
        - cargo -V
        - rustc -V
    script:
        - cargo test --workspace --exclude spade-cxx --color=always
        - cargo doc --no-deps

test:linux-latest:
    stage: test
    image: "rust:latest"
    before_script:
        - cargo -V
        - rustc -V
    script:
        - cargo test --workspace --exclude spade-cxx --color=always
        - cargo doc --no-deps

test:linux-nightly:
    variables:
      CARGO_HOME: /usr/local/cargo
    allow_failure: true
    stage: test
    image: "rust:latest"
    before_script:
        - rustup install nightly
        - rustup default nightly
    script:
        - cargo build -p spade-lang
        - cargo test --color=always
        - cargo doc --no-deps

test:macos-aarch64:
  rules:
    - if: $CI_PROJECT_NAMESPACE == "spade-lang"
  variables:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_ENV_HINTS: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
  tags:
    - saas-macos-medium-m1
  image: macos-14-xcode-15
  before_script:
    - brew install rustup-init python3
    - rustup install $RUST_VERSION
    - rustup override set $RUST_VERSION
    - python3 -m pip install --upgrade cffi
    - cargo -V
    - rustc -V
  script:
    - cargo test --workspace --exclude spade-cxx --color=always
    - cargo doc --no-deps
  cache:
    key:
      files:
        - Cargo.lock
    paths:
      - target
      # FIXME: homebrew installs cargo deps somewhere else. where?
      # - $CARGO_HOME

test:output-test:
    # Ubuntu 22.04 has iverilog-11.0, which it seems like we need.
    image: ubuntu:22.04
    variables:
        APT_PYTHON_VERSION: "3.10"
    stage: test
    before_script:
        - apt update
        - apt install -y iverilog curl gcc make python$APT_PYTHON_VERSION libssl-dev
        # pyo3 expects exactly `python3` in the path.
        - command -v /usr/bin/python3 || ln -s /usr/bin/python$APT_PYTHON_VERSION /usr/bin/python3
        - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none
        - source ./cargo/env
        - rustup install $RUST_VERSION
        - source ./cargo/env
    script:
        - cd output_test && make

test:swim-tests:
    image: "rust:$RUST_VERSION"
    stage: test
    script:
        - apt update
        - apt install -y iverilog python3-dev python3-venv
        - cargo install --git https://gitlab.com/spade-lang/swim --locked
        - cd swim_tests
        - $CARGO_HOME/bin/swim test

test:swim-test-errors:
    image: "rust:$RUST_VERSION"
    stage: test
    script:
        - apt update
        - apt install -y iverilog python3-dev python3-venv
        - cargo install --git https://gitlab.com/spade-lang/swim --locked
        - cd swim_test_errors
        - export PATH=$PATH:$CARGO_HOME/bin/
        - python3 snapshot.py

# Build static binaries of spade and vcd-translate
build:static:
  image: "rust:$RUST_VERSION-alpine"
  stage: test
  before_script:
    - apk add git musl-dev g++
  script:
    - cargo build --release --workspace --exclude spade-python --exclude spade-language-server --target x86_64-unknown-linux-musl
    - strip target/x86_64-unknown-linux-musl/release/spade
    - strip target/x86_64-unknown-linux-musl/release/vcd-translate
  artifacts:
    paths:
      - target/x86_64-unknown-linux-musl/release/spade
      - target/x86_64-unknown-linux-musl/release/vcd-translate
      - target/x86_64-unknown-linux-musl/release/build/spade-cxx-*/out/cxxbridge/include/spade-cxx/src/spade.rs.*
      - target/x86_64-unknown-linux-musl/release/build/spade-cxx-*/out/libspade-cxx.a

build:wheel-manylinux:
  image: quay.io/pypa/manylinux2014_x86_64
  stage: test
  before_script:
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source $CARGO_HOME/env
    - /opt/python/cp38-cp38/bin/pip install maturin
  script:
    - /opt/python/cp38-cp38/bin/maturin build -i /opt/python/cp38-cp38/bin/python -m spade-python/Cargo.toml
  artifacts:
    paths:
      - /builds/spade-lang/spade/target/wheels/*.whl

build:wheel-musllinux:
  image: quay.io/pypa/musllinux_1_1_x86_64
  stage: test
  before_script:
    - curl https://sh.rustup.rs -sSf | sh -s -- -y
    - source $CARGO_HOME/env
    - /opt/python/cp38-cp38/bin/pip install maturin
  script:
    - /opt/python/cp38-cp38/bin/maturin build -i /opt/python/cp38-cp38/bin/python -m spade-python/Cargo.toml
  artifacts:
    paths:
      - /builds/spade-lang/spade/target/wheels/*.whl

test:coverage:
    image: xd009642/tarpaulin
    variables:
        APT_PYTHON_VERSION: "3"
    script:
        - apt-get install -y pkg-config
        # spade-python currently does not build with tarpaulin, but we also don't
        # have many tests there so we'll ignore it
        - cargo tarpaulin --workspace --exclude spade-python --exclude spade-cxx --exclude spade-macros --out xml --target-dir target/tarpaulin
    coverage: '/^\d+.\d+% coverage/'
    artifacts:
        reports:
            coverage_report:
                coverage_format: cobertura
                path: cobertura.xml

check:cargo-fmt:
    stage: test
    image: "rust:$RUST_VERSION"
    cache: [] # Disable cache since it takes too much space in gitlab
    script:
        - rustup component add rustfmt
        # pass --check to rustfmt to error if un-formatted
        - cargo fmt -- --check

check:typos-and-todos:
    stage: test
    cache: [] # Disable cache since the spell checker finds typos in other peoples source code
    before_script:
        - apt update
        - apt install -y wget
        - wget https://github.com/crate-ci/typos/releases/download/v1.16.25/typos-v1.16.25-x86_64-unknown-linux-musl.tar.gz -O typos.tar.gz
        # Extract only the typos executable to not get a docs folder which the typo checker
        # will find typos in
        - tar xzf typos.tar.gz ./typos
    script:
        - ./typos
          # invert exit code of grep while still printing all matches
        - set -e; find . -name "*.rs" | xargs grep -Ei "// *TODO" || exit 0 && exit 1
    after_script:
        - >
            if [ $CI_JOB_STATUS == 'success' ]; then
              echo 'SUCCESS'
            else
              echo 'Running again to give you all output since the test failed'
              ./typos || echo ""
              find . -name "*.rs" | xargs grep -Ei "// *TODO" || echo ""
            fi

trawler:
    stage: trawler
    allow_failure: true
    variables:
        UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    trigger: spade-lang/trawler


yowaspBuild:
  image: alpine:latest
  variables:
    CARGO_HOME: null
  before_script:
    - apk add --update-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ curl npm git
    - apk add build-base rustup python3
    - rustup-init --default-toolchain stable -y
    - source $HOME/.cargo/env
  script:
    - rustup toolchain install stable
    - rustup target add wasm32-wasip1
    # We want to be able to pre-build this on merge requests, setting the
    # UPSTREAM_BRANCH variable in a job that triggers this one allows changing the
    # configuration
    - cd yowasp
    - ./build.sh
    - ./package-npmjs.sh
  artifacts:
    paths:
      # Path of our artifacts
      - yowasp/npmjs/dist

yowaspPublish:
  needs: [yowaspBuild]
  image: alpine:latest
  before_script:
    - apk add --update-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/community/ npm
  script:
    - "[[ '1' == $(ls yowasp/npmjs/dist | wc -l) ]]"
    # NOTE: If NPM_ACCESS_TOKEN is set to protected and the CI flow is running on a non-protected
    # branch, it will silently fail. Make sure to use a protected branch for this step
    - npm config set //registry.npmjs.org/:_authToken ${NPM_ACCESS_TOKEN}
    - cat ~/.npmrc
    - npm publish yowasp/npmjs/dist/$(ls yowasp/npmjs/dist)
  rules:
    # only publish on the main branch
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - when: never

yowaspPlayground:
  needs: [yowaspPublish]
  trigger: spade-lang/playground
  rules:
    # only publish on the main branch
    - if: '$CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      when: always
    - when: never


