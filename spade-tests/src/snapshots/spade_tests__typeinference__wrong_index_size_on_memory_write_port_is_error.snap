---
source: spade-tests/src/typeinference.rs
---
use std::mem::clocked_memory;
entity test(clk: clock, idx: uint<32>) -> int<8> {
    let mem: Memory<int<8>, 16> = inst clocked_memory(clk, [(true, idx, 0)]);
    0
}


error: Expected type [(bool, uint<32>, int<8>); 1], got [(bool, uint<4>, int<8>); 1]
  ┌─ testinput:3:60
  │
3 │     let mem: Memory<int<8>, 16> = inst clocked_memory(clk, [(true, idx, 0)]);
  │                                   -------------------------^^^^^^^^^^^^^^^^-
  │                                   │                        │
  │                                   │                        Expected [(bool, uint<32>, int<8>); 1], got [(bool, uint<4>, int<8>); 1]
  │                                   The error occurred when unifying types here
  │
  = note: Expected: 32
                in: [(bool, uint<32>, int<8>); 1]
               Got: 4
                in: [(bool, uint<4>, int<8>); 1]
  = note: because the value is used as an index to a memory
