fn is_some(opt: Option<uint<16>>) -> bool {
    opt.is_some()
}

struct CombinatorsOut {
    map: Option<uint<17>>,
    pipeline_map: Option<uint<16>>,
    and_then: Option<uint<17>>,
}

fn combinators(clk: clock, val: Option<uint<16>>) -> CombinatorsOut {
    let plresult = val
        .inst(3) pmap(clk, pipeline(3) (clk, x) {
        reg*3;
            x
        });
    CombinatorsOut$(
        map: val.map(fn (x) {x + 1}),
        pipeline_map: plresult,
        and_then: val.and_then(fn (x) {if x < 10 {Some(x + 1)} else {None}}),
    )
}
