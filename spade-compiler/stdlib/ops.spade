/// Divide x by 2**pow rounding towards the nearest integer, with 0.5 and -0.5
/// being rounded towards +inf.
///
/// Example outputs:
///
/// 2/2 = 1
/// 3/2 = 2
/// -3/2 = -1

// FIXME: Implement in spade rather than as a compiler intrinsic when spade
// supports codegen for generics
// lifeguard spade#140
// FIXME: pow and result should probably not be `N` but type inference is not good
// enough for that yet
fn div_pow2<#uint N>(x: int<N>, pow: int<N>) -> int<N> __builtin__


/// Computes the absolute value of x. The result is truncated, meaning that
/// `abs(-2^(N-1)) == -2^(N-1)`.
fn abs_trunc<#uint N>(x: int<N>) -> int<N> {
    if x < 0 {
        -x
    }
    else {
        x
    }
}

/// Returns the max value of two integers
fn max<#uint N>(x: int<N>, y: int<N>) -> int<N> {
    if x < y {
        y
    } else {
        x
    }
}

/// Returns the min value of two integers
fn min<#uint N>(x: int<N>, y: int<N>) -> int<N> {
    if x < y {
        x
    } else {
        y
    }
}

/// Returns the two integers in increasing order
fn order<#uint N>(x: int<N>, y: int<N>) -> (int<N>, int<N>) {
    if x < y {
        (x, y)
    } else {
        (y, x)
    }
}


/// Returns the gray code value of the given binary value
fn bin_to_gray<#uint N>(x: uint<N>) -> uint<N> {
    (x >> 1) ^ x
}

/// Returns the binary value of the given gray code value
fn gray_to_bin<#uint N>(gray: uint<N>) -> uint<N> {
    gen if N == 0 {
        gray
    } else if N == 1 {
        gray
    } else {
        let high_bit: uint<N> = gray & (1_u1 `concat` 0);
        let lower_gray: uint<{N - 1}> = trunc(gray ^ (high_bit >> 1));
        high_bit | zext(gray_to_bin(lower_gray))
    }
}


/// Equivalent to verilog and reduction operator &(x)
/// Returns all bits of x joined by an and-operation
fn reduce_and<#uint N>(x: uint<N>) -> bool __builtin__

/// Equivalent to verilog or reduction operator |(x)
/// Returns all bits of x joined by an or-operation
fn reduce_or<#uint N>(x: uint<N>) -> bool __builtin__

/// Equivalent to verilog xor reduction operator ^(x)
/// Returns all bits of x joined by an xor-operation
fn reduce_xor<#uint N>(x: uint<N>) -> bool __builtin__


/// Evaluates to x / y in verilog.
/// In general, this is going to be slow and large, so should be avoided if you don't know
/// what you're doing.
/// For division by constant powers of two, use `/`
// This is special cased by the compiler. The actual type, if Spade was able to express
// it itself would be comb_div<#uint N>(x: Number<N>, y: Number<N>) -> Number<N>.
fn comb_div<N>(x: N, y: N) -> N __builtin__


/// Evaluates to x % y in verilog.
/// In general, this is going to be slow and large, so should be avoided if you don't know
/// what you're doing.
/// For modulo operations by constant powers of two, use `%`
// This is special cased by the compiler. The actual type, if Spade was able to express
// it itself would be comb_mod<#uint N>(x: Number<N>, y: Number<N>) -> Number<N>.
fn comb_mod<N>(x: N, y: N) -> N __builtin__
