enum Option<T> {
    None,
    Some{value: T},
}

impl<T> Option<T> {
    fn is_some(self) -> bool {
        match self {
            Some(_) => true,
            None => false,
        }
    }

    fn is_none(self) -> bool {
        !self.is_some()
    }

    /// Returns the inner value if it is present, otherwise None
    fn unwrap_or(self, default: T) -> T {
        match self {
            Some(val) => val,
            None => default,
        }
    }

    /// Returns the inner value if present, or an undefined value otherwise. The semantics
    /// of the undefined value are described in detail in `std::undef::undef`. Importantly,
    /// reading an undef value is undefined behaviour so this method should only be used
    /// if you guarantee that the value is never read when the value is `None`, for example
    /// by checking the Option type again 
    fn unwrap_or_undef(self) -> T {
        match self {
            Some(t) => t,
            None => std::undef::undef()
        }
    }


    /// Transforms the contained value using the `f` function.
    /// If the value is `Some(val)`, the result is `Some(f.call((val)))`
    /// if the value is `None`, the result is `None`
    ///
    /// ```
    /// let add_one = option.map(fn(x) {x + 1})
    /// ```
    fn map<F, O>(self, f: F) -> Option<O>
        where F: Fn<(T), O>
    {
        match self {
            Some(val) => Some(f.call((val,))),
            None => None
        }
    }

    /// If the value is `None`, returns `None`, otherwise calls `f` on the contained
    /// value. `f` returns another Option
    ///
    /// let filtered = option.and_then(fn (x) {if x < 10 {Some(x)} else {None}
    fn and_then<F, O>(self, f: F) -> Option<O>
        where F: Fn<(T), Option<O>>
    {
        match self {
            Some(val) => f.call((val,)),
            None => None
        }
    }

    /// Returns an array containing the `N` previous `Some` values starting with `default`
    /// before `N` values have been observed.
    ///
    /// The output is valid in the same clock cycles as the input and the input is the 0th value
    /// of the array
    ///
    /// ```
    /// input.sliding_window::<2>(clk, rst, 0)
    /// input:  | None | Some(1)      | Some(2)      | None | Some(3)
    /// output: | None | Some([1, 0]) | Some([2, 1]) | None | Some(3, 2])
    /// ```
    entity sliding_window<#uint N>(self, clk: clock, rst: bool, default: T) -> Option<[T; N]> {
        decl val;
        let next = match self {
            Some(new) => [new] `concat_arrays` val[0..N-1],
            None => val
        };
        reg(clk) val reset(rst: [default; N]) = next;
        match self {
            Some(_) => Some(next),
            None => None
        }
    }

    /// Gathers `N` values and outputs them as an array
    /// 
    /// Unlike sliding_window, each value seen in the input is only seen once in the output.
    ///
    /// The 0th output element is the oldest
    ///
    /// There is a one clock cycle latency between input and output
    /// 
    /// input.sliding_window::<2>(clk, rst, 0)
    /// ```
    /// input:  | None | Some(1) | Some(2)       | None         | Some(3) | Some(4) | -
    /// output: | None | None    | Some([1, 2])  | None         | None    | Some([3, 4])
    /// ```
    entity chunks<#uint N>(self, clk: clock, rst: bool) -> Option<[T; N]> {
        reg(clk) count: uint<{uint_bits_to_fit(N)}> reset(rst: 0) = match self {
            Some(new) => {
                if count + 1 == N {0} else {trunc(count + 1)}
            },
            None => {
                count
            }
        };

        decl values;
        let next_values = match self {
            Some(new) => values[1..N] `concat_arrays` [new],
            None => values
        };
        reg(clk) values = next_values;

        if count + 1 == N && self.is_some() {
            Some(next_values)
        } else {
            None
        }
    }
}
