use std::ports::new_mut_wire;
use std::ports::read_mut_wire;

use std::cdc as cdc;

/// Define a memory where values are written on the rising edge of the clock.
/// Reads can occur asynchronously with the `read_mem` function. If Clocked reads
/// should be used, the read result should be placed in a register
///
/// The write array defines all the write ports to the memory. It consists of a
/// `write enable`, `address` and `data` field. When WE is enabled, data is written
/// to address. Otherwise no change takes effect
/// NOTE: We when possible, we should make compute AddrWidth from NumElements
entity clocked_memory<#uint NumElements, #uint WritePorts, #uint AddrWidth, D>(
    clk: clock,
    writes: [(bool, uint<AddrWidth>, D); WritePorts],
) -> Memory<D, NumElements>
    __builtin__


/// Same as `clocked_memory` but initializes the memory with the values specified in `initial_values`.
/// The initial values must be evaluatable at compile time, otherwise an error is thrown
entity clocked_memory_init<#uint NumElements, #uint WritePorts, #uint AddrWidth, D>(
    clk: clock,
    writes: [(bool, uint<AddrWidth>, D); WritePorts],
    initial_values: [D; NumElements]
) -> Memory<D, NumElements>
    __builtin__

/// Get the value out of a memory
entity read_memory<#uint AddrWidth, D, #uint NumElements> (
    mem: Memory<D, NumElements>,
    addr: uint<AddrWidth>
) -> D
    __builtin__


struct port WritePort<#uint W, D> {
    addr: ~& uint<W>,
    write: ~& Option<D>,
}


/// A read port for a memory. It is not recommended to manually read the signals
/// in this struct, instead use `read_read_port` to access the port.
struct port ReadPort<#uint W, D> {
    addr: ~& uint<W>,
    out: &D,
}

pipeline(1) read_read_port<#uint W, D>(read_clk: clock, addr: uint<W>, p: ReadPort<W, D>) -> D {
        set p.addr = addr;
    reg;
        *p.out
}

/// A dual port block RAM that supports read and write ports being in different domains.
/// If writes and reads happen to the same address, the behaviour is undefined.
entity dp_bram<#uint W, D, #uint C>(write_clk: clock, read_clk: clock) -> (WritePort<W, D>, ReadPort<W, D>) {
    let w_addr = inst new_mut_wire();
    let w_write = inst new_mut_wire();
    let r_addr = inst new_mut_wire();

    reg(write_clk) undef = undef;
    let w = match inst read_mut_wire(w_write) {
        Some(w) => (true, inst read_mut_wire(w_addr), w),
        None => (false, inst read_mut_wire(w_addr), undef),
    };

    let mem: Memory<D, C> = inst clocked_memory(write_clk, [w]);

    reg(read_clk) read_result = inst read_memory(mem, inst read_mut_wire(r_addr));

    (WritePort$(addr: w_addr, write: w_write), ReadPort$(addr: r_addr, out: &read_result))
}


/// A fifo write port. Writes a single element of data data in to the write port unless `full`
/// is true. If full is true, the write is ignored
struct port FifoWrite<D> {
    write: ~& Option<D>,
    full: &bool,
}
/// A fifo read port
/// If there fifo is not empty, `read` contains the next value. If ack is set,
/// that element is popped from the fifo this clock cycle. / The num_elements
/// is approximate but guaranteed to be a conservative estimate, i.e. there are
/// at least `num_elements` in the fifo.
struct port FifoRead<#uint W, D> {
    read: &Option<D>,
    ack: ~& bool,
    num_elements: &uint<W>
}

mod fifo_impl {
    use lib::ports::new_mut_wire;
    use lib::ports::read_mut_wire;

    use lib::mem::clocked_memory;
    use lib::mem::read_memory;

    use lib::cdc as cdc;

    use lib::mem::FifoRead;
    use lib::mem::FifoWrite;
    use lib::mem::ReadPort;
    use lib::mem::WritePort;
    use lib::mem::read_read_port;

    struct port FifoRtoW<#uint W> {
        read_ptr: &uint<W>,
        write_ptr: ~& uint<W>,
    }

    entity fifo_read<#uint W, D, #uint C>(
        read_clk: clock,
        read_rst: bool,
        mem: ReadPort<W, D>,
        to_w: ~FifoRtoW<W>,
        write_clk: clock
    ) -> FifoRead<W, D> {
        // Synchronization stuff
        let write_ptr = inst lib::cdc::unsafe::sync_uint_counter$(
            source_clk: write_clk,
            dest_clk: read_clk,
            in: *to_w.write_ptr,
        );
        let write_clk = false; // Unbind write_clk so we don't use it on accident later

        let ack = inst new_mut_wire();

        decl read_ptr;
        let empty = write_ptr == read_ptr;
        let read_ptr_next = match (inst read_mut_wire(ack), empty) {
            (true, true) => read_ptr,
            (true, false) => trunc(read_ptr + 1),
            (false, _) => read_ptr,
        };
        reg(read_clk) read_ptr reset(read_rst: 0) = read_ptr_next;

        let out = inst(1) read_read_port(read_clk, read_ptr_next, mem);

        let num_elements = {
            // If write is behind read, it is catching up
            // |-----w--------r--------|
            // So add the size of the memory to the write ptr to make
            // |--------------r--------|-----w-----------------|
            // now (w - r) is positive and < C

            // The + 0 here is a manual zext
            let write_ptr_abs = if write_ptr < read_ptr {write_ptr + 0 + C} else {zext(write_ptr)};

            trunc((write_ptr_abs - zext(read_ptr)))
        };

        set to_w.read_ptr = read_ptr;

        FifoRead$(
            read: &if !empty {Some(out)} else None,
            ack,
            num_elements: &num_elements,
        )
    }

    entity fifo_write<#uint W, D>(
        write_clk: clock,
        write_rst: bool,
        mem: WritePort<W, D>,
        from_w: FifoRtoW<W>,
        read_clk: clock
    ) -> FifoWrite<D> {
        let read_ptr = inst cdc::unsafe::sync_uint_counter$(
            source_clk: read_clk,
            dest_clk: write_clk,
            in: *from_w.read_ptr,
        );
        let read_clk = false; // Unbind so we don't use it on accident later

        let write_value = inst new_mut_wire();

        decl write_ptr;
        let full = trunc(write_ptr + 1) == read_ptr;

        reg(write_clk) write_ptr reset(write_rst: 0) = match (inst read_mut_wire(write_value), full) {
            (Some(v), false) => trunc(write_ptr + 1),
            _ => write_ptr,
        };

        set mem.addr = write_ptr;
        set mem.write =  match (inst read_mut_wire(write_value), full) {
            (Some(v), false) => Some(v),
            _ => None
        };

        set from_w.write_ptr = write_ptr;
        FifoWrite$(
            full: &full,
            write: write_value
        )
    }
}

/// A cross-domain fifo backed by block RAM.
/// NOTE: W *must* be 2^C but this is not currently checked
entity fifo<#uint AddrWidth, Data, #uint NumElements>(
    write_clk: clock,
    write_rst: bool,
    read_clk: clock,
    read_rst: bool,
) -> (FifoWrite<Data>, FifoRead<AddrWidth, Data>) {
    let (mem_write, mem_read) = inst dp_bram::<AddrWidth, Data, NumElements>$(write_clk, read_clk);

    let (from_w, to_w) = port;

    let write = inst fifo_impl::fifo_write::<AddrWidth, Data>$(write_clk, write_rst, mem: mem_write, from_w, read_clk);
    let read = inst fifo_impl::fifo_read::<AddrWidth, Data, NumElements>$(read_clk, read_rst, mem: mem_read, to_w, write_clk);

    (write, read)
}



