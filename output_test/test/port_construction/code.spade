/// A port to a unit which can scale a value by 2. We want this to
/// appear as a port which a unit that wants to scale values can consume, so
/// it is returned by a scaler, and consumed by a scalee
struct port ScalingPort {
    in: ~& int<10>,
    out: &int<12>,
}

entity scalee(p: ScalingPort, in: int<10>) -> int<12> {
    set p.in = in;
    *p.out
}

// The implementation of the scaler views the ports in the opposite direction, i.e.
// it also wants to *consume* the port, not produce it
entity scaler_impl(p: ~ScalingPort) -> bool {
    let in = (*p.in);
    let out = sext(in) << 1;
    set p.out = out;
    true
}

entity arbiter(val: int<10>) -> int<12> {
    let (p1, p2) = port;

    let _ = inst scaler_impl(p2);
    inst scalee(p1, val)

}

